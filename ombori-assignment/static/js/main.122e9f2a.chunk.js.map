{"version":3,"sources":["shared/logger.js","shared/notifications/index.js","shared/error/ErrorBountry.js","components/pages/NotFound.js","components/molecules/loader.js","routes.js","App.js","serviceWorker.js","index.js","shared/notifications/context.js","config.js","shared/error/context.js"],"names":["INFO_STYLE","WARN_STYLE","ERROR_STYLE","generateTrace","stackTrace","Error","stack","replace","callerName","split","callerSource","substring","trim","Logger","info","message","LOGGING","enabled","loglevel","args","length","console","warn","error","Notification","children","notificationsRef","createRef","useState","type","fail","statusCode","state","setState","value","notification","setNotification","show","current","addNotification","level","position","ref","ErrorBoundary","props","setError","bind","applicationError","this","context","React","Component","contextType","NotificationsContext","NotFound","status","title","subTitle","extra","to","LoadingComponent","styled","AntLoader","Loader","color","COLORS","LOADER","width","height","Routes","fallback","exact","path","component","lazy","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","defaultNotificationContextState","Context","createContext","NotificationContextProvider","Provider","Consumer","PRIMARY","SECONDARY","SECONDARY_LIGHT","TEXT_DARK","TEXT_LIGHT","defaultErrorContextState","ErrorContext","ErrorContextProvider"],"mappings":"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","file":"static/js/main.122e9f2a.chunk.js","sourcesContent":["import { LOGGING } from '../config';\n\nconst INFO_STYLE = `\n  color: blue;\n  background: yellow;\n  font-weight: bold;\n  padding: 3px;\n`;\n\nconst WARN_STYLE = `\n  color: red;\n  background: beige;\n  font-weight: bold;\n  border: 1px solid red;\n  padding: 3px;\n`;\n\nconst ERROR_STYLE = `\n  color: white;\n  background: red;\n  font-weight: bold;\n  padding: 3px;\n`;\n\nfunction generateTrace() {\n  const stackTrace = new Error().stack.replace(/^Error\\s+/, ''); // Only tested in latest FF and Chrome\n\n  let callerName = stackTrace.split('\\n')[2]; // 1st item is this, 2nd item is caller\n  let callerSource = stackTrace.split('\\n')[3]; // 1st item is this, 2nd item is caller\n\n  if (callerSource) {\n    callerSource = callerSource.replace(/ http.*$/, '');\n  }\n  if (callerName) {\n    callerName = callerName.replace(/ http.*$/, '');\n  }\n\n  callerName = callerName\n    ? callerName\n      .replace(/ \\(.+\\)$/, '')\n      .substring(6)\n      .trim()\n    : '';\n  callerSource = callerSource\n    ? callerSource\n      .replace(/ \\(.+\\)$/, '')\n      .substring(6)\n      .trim()\n    : '';\n\n  return [callerName, callerSource];\n}\n\nconst Logger = {\n  info(message, ...args) {\n    const [callerName, callerSource] = generateTrace();\n\n    if (\n      LOGGING.enabled &&\n      (LOGGING.loglevel === 'error' || LOGGING.loglevel === 'warn' || LOGGING.loglevel === 'info')\n    ) {\n      if (args && args.length) {\n        // eslint-disable-next-line no-console\n        console.info(`%c[INFO] ${callerSource}/${callerName}`, INFO_STYLE, message, args);\n      } else {\n        // eslint-disable-next-line no-console\n        console.info(`%c[INFO] ${callerSource}/${callerName}`, INFO_STYLE, message);\n      }\n    }\n  },\n\n  warn(message, ...args) {\n    const [callerName, callerSource] = generateTrace();\n    if (LOGGING.enabled && (LOGGING.loglevel === 'error' || LOGGING.loglevel === 'warn')) {\n      if (args && args.length) {\n        // eslint-disable-next-line no-console\n        console.info(`%c[WARN] ${callerSource}/${callerName}`, WARN_STYLE, message, args);\n      } else {\n        // eslint-disable-next-line no-console\n        console.info(`%c[WARN] ${callerSource}/${callerName}`, WARN_STYLE, message);\n      }\n    }\n  },\n\n  error(message, ...args) {\n    const [callerName, callerSource] = generateTrace();\n    if (LOGGING.enabled && LOGGING.loglevel === 'error') {\n      if (args && args.length) {\n        // eslint-disable-next-line no-console\n        console.info(`%c[ERROR] ${callerSource}/${callerName}`, ERROR_STYLE, message, args);\n      } else {\n        // eslint-disable-next-line no-console\n        console.info(`%c[ERROR] ${callerSource}/${callerName}`, ERROR_STYLE, message);\n      }\n    }\n  },\n};\n\nexport default Logger;\n","import React, { useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport NotificationSystem from 'react-notification-system';\nimport { NotificationContextProvider } from './context';\n\nconst Notification = ({ children }) => {\n  const notificationsRef = createRef();\n  const [state, setState] = useState({\n    type: 'error',\n    fail: false,\n    message: '',\n    statusCode: '',\n  });\n\n  const setNotification = (notification, show) => {\n    // Level = success, error, warning and info\n    if (show && notificationsRef && notificationsRef.current) {\n      notificationsRef.current.addNotification({\n        level: notification.type,\n        message: (\n          <div>\n            {notification.statusCode && <b>{notification.statusCode}: </b>}\n            {notification.message}\n          </div>\n        ),\n        position: 'tc',\n      });\n    }\n    setState({ ...notification });\n  };\n\n  return (\n    <NotificationContextProvider value={{ notification: state, setNotification }}>\n      <NotificationSystem ref={notificationsRef} />\n      {children}\n    </NotificationContextProvider>\n  );\n};\n\nNotification.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NotificationsContext from '../notifications/context';\nimport { ErrorContextProvider } from './context';\nimport Logger from '../logger';\n\nclass ErrorBoundary extends React.Component {\n  static getDerivedStateFromError(error) {\n    Logger.info('Derived Error', error);\n    return { applicationError: true };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.setError = this.setError.bind(this);\n\n    this.state = {\n      error: {\n        fail: false,\n        message: '',\n        statusCode: '',\n      },\n      applicationError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    Logger.info('CDC', error, info);\n  }\n\n  setError(error, show) {\n    if (show) {\n      const { setNotification } = this.context;\n      setNotification({ ...error, type: 'error' }, show);\n    }\n    this.setState({ error });\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error, applicationError } = this.state;\n\n    if (applicationError) {\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return <ErrorContextProvider value={{ error, setError: this.setError }}>{children}</ErrorContextProvider>;\n  }\n}\n\nErrorBoundary.contextType = NotificationsContext;\n\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Result, Button } from 'antd';\n\nconst NotFound = () => (\n  <Result\n    status=\"404\"\n    title=\"404\"\n    subTitle=\"Sorry, the page you visited does not exist.\"\n    extra={\n      <Link to=\"/\">\n        <Button type=\"primary\">Back Home</Button>\n      </Link>\n    }\n  />\n);\n\nexport default NotFound;\n","import React from 'react';\nimport styled from 'styled-components';\nimport AntLoader from 'react-loader-spinner';\nimport { COLORS } from '../../config';\n\nconst LoadingComponent = styled(AntLoader)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Loader = () => <LoadingComponent color={COLORS.LOADER} width={100} height={100} type=\"MutatingDots\" />;\n\nexport default Loader;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport NotFound from './components/pages/NotFound';\nimport Loader from './components/molecules/loader';\n\nconst Routes = () => (\n  <Suspense fallback={<Loader />}>\n    <Switch>\n      <Route exact path=\"/\" component={lazy(() => import('./components/pages/Users'))} />\n      <Route exact path=\"/:id\" component={lazy(() => import('./components/pages/UserDetails'))} />\n      <Route component={NotFound} />\n    </Switch>\n  </Suspense>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport 'antd/dist/antd.css';\n\nimport Notification from './shared/notifications';\nimport ErrorBoundary from './shared/error/ErrorBountry';\nimport Routes from './routes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Notification>\n      <ErrorBoundary>\n        <BrowserRouter>\n          <Routes />\n        </BrowserRouter>\n      </ErrorBoundary>\n    </Notification>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Logger from '../logger';\n\nconst defaultNotificationContextState = {\n  notification: {\n    type: '',\n    fail: false,\n    message: '',\n    statusCode: '',\n  },\n  setNotification: (notification, show) => {\n    Logger.info(notification, show);\n  },\n};\n\nexport const Context = React.createContext(defaultNotificationContextState);\n\nexport const NotificationContextProvider = Context.Provider;\nexport const NotificationContextConsumer = Context.Consumer;\n\nexport default Context;\n","export const LOGGING = {\n  enabled: true,\n  loglevel: 'error', // 1) error, 2) warn, 3) info\n};\n\nexport const COLORS = {\n  PRIMARY: '#34495e',\n  SECONDARY: '#95a5a6',\n  SECONDARY_LIGHT: '#ecf0f1',\n  TEXT_DARK: '#2c3e50',\n  TEXT_LIGHT: '#ecf0f1',\n  LOADER: '#FFA500'\n};\n","import React from 'react';\nimport Logger from '../logger';\n\nconst defaultErrorContextState = {\n  error: {\n    fail: false,\n    message: '',\n    statusCode: '',\n  },\n  setError: (error, show) => {\n    Logger.info(error, show);\n  },\n};\n\nconst ErrorContext = React.createContext(defaultErrorContextState);\n\nexport const ErrorContextProvider = ErrorContext.Provider;\nexport const ErrorContextConsumer = ErrorContext.Consumer;\n\nexport default ErrorContext;\n"],"sourceRoot":""}